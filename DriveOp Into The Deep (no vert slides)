package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;

@TeleOp(name = "DriveOp", group = "TeleOp")
public class DriveOp extends OpMode {

    private DcMotor frontLeftMotor;
    private DcMotor frontRightMotor;
    private DcMotor backLeftMotor;
    private DcMotor backRightMotor;
    private DcMotor horzSlide;
    private Servo wrist;
    private Servo intake;

    @Override
    public void init() {
        frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeft");
        frontRightMotor = hardwareMap.get(DcMotor.class, "frontRight");
        backLeftMotor = hardwareMap.get(DcMotor.class, "backLeft");
        backRightMotor = hardwareMap.get(DcMotor.class, "backRight");
        horzSlide = hardwareMap.get(DcMotor.class, "horzSlide");
        wrist = hardwareMap.get(Servo.class, "wrist");
        intake = hardwareMap.get(Servo.class, "intake");

        frontLeftMotor.setDirection(DcMotor.Direction.FORWARD);
        frontRightMotor.setDirection(DcMotor.Direction.REVERSE);
        backLeftMotor.setDirection(DcMotor.Direction.FORWARD);
        backRightMotor.setDirection(DcMotor.Direction.REVERSE);
        horzSlide.setDirection(DcMotor.Direction.FORWARD);
    }

    @Override
    public void loop() {
        double drive1 = -gamepad1.left_stick_y; 
        double strafe1 = gamepad1.left_stick_x;  
        double turn1 = gamepad1.right_stick_x;

        double drive2 = -gamepad2.left_stick_y;
        double strafe2 = gamepad2.left_stick_x;
        double turn2 = gamepad2.right_stick_x;

        double drive = (drive1 + drive2) / 2.0;
        double strafe = (strafe1 + strafe2) / 2.0;
        double turn = (turn1 + turn2) / 2.0;

        double frontLeftPower = drive + strafe + turn;
        double frontRightPower = drive - strafe - turn;
        double backLeftPower = drive - strafe + turn;
        double backRightPower = drive + strafe - turn;

        double maxPower = Math.max(1.0, Math.abs(frontLeftPower));
        maxPower = Math.max(maxPower, Math.abs(frontRightPower));
        maxPower = Math.max(maxPower, Math.abs(backLeftPower));
        maxPower = Math.max(maxPower, Math.abs(backRightPower));

        frontLeftPower /= maxPower;
        frontRightPower /= maxPower;
        backLeftPower /= maxPower;
        backRightPower /= maxPower;

        frontLeftMotor.setPower(frontLeftPower);
        frontRightMotor.setPower(frontRightPower);
        backLeftMotor.setPower(backLeftPower);
        backRightMotor.setPower(backRightPower);

        if (gamepad1.dpad_left || gamepad2.dpad_left) {
            horzSlide.setPower(1.0);
        } else if (gamepad1.dpad_right || gamepad2.dpad_right) {
            horzSlide.setPower(-1.0);
        } else {
            horzSlide.setPower(0.0);
        }

        if (gamepad1.right_bumper || gamepad2.right_bumper) {
            wrist.setPosition(1.0);
        } else {
            wrist.setPosition(0.0);
        }

        if (gamepad1.left_bumper || gamepad2.left_bumper) {
            intake.setPosition(1.0);
        } else {
            intake.setPosition(0.0);
        }

        telemetry.addData("Front Left Power", frontLeftPower);
        telemetry.addData("Front Right Power", frontRightPower);
        telemetry.addData("Back Left Power", backLeftPower);
        telemetry.addData("Back Right Power", backRightPower);
        telemetry.addData("Horz Slide Power", horzSlide.getPower());
        telemetry.update();
    }

    @Override
    public void stop() {
        frontLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backLeftMotor.setPower(0);
        backRightMotor.setPower(0);
        horzSlide.setPower(0);
    }
}
